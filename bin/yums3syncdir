#!/usr/bin/env ruby

require 'optparse'
require 'yum_s3_sync'

require 'net/http'
require 'uri'
require 'nokogiri'

options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: yums3syncdir [options]'

  opts.on('-s', '--source SOURCEDIR', 'HTTP source base URL') do |s|
    options[:source_base] = s
  end
  opts.on('-b', '--bucket BUCKET', 'Target bucket name') do |b|
    options[:target_bucket] = b
  end
  opts.on('-p', '--prefix PREFIX', 'Target bucket prefix') do |p|
    options[:target_base] = p
  end
  opts.on('-x', '--exclude prefix1,prefix2', Array, 'Exclude prefixes') do |x|
    options[:exclude] = x
  end
  opts.on('-k', '--keep', 'Never overwrite exitant files') do |k|
    options[:keep] = true
  end
  opts.on('-n', '--dry-run', 'Don\'t make any changes') do |n|
    options[:dry_run] = true
  end
end

opt_parser.parse!

if !options[:source_base] || !options[:target_bucket] || !options[:target_base]
  puts opt_parser
  exit 1
end

def parent?(path)
  return true if path.start_with?('/')
  return true if path.include?('../')
end

uri = URI(options[:source_base])

repositories = []

Net::HTTP.start(uri.host) do |http|
  http.request_get(uri.path) do|response|
    unless response.code.start_with?('2')
      puts "Unable to download index from #{uri} : #{response.message}"
      exit 1
    end

    if response['content-type'].start_with?('text/html')
      response.read_body do |html|
        doc = Nokogiri::HTML(html)

        doc.css('html a').each do |link|
          begin
            link_uri = URI(link['href'])
          rescue URI::InvalidURIError => e
            puts "Invalid URI: #{link['href']} skipping"
            next
          end

          next if link_uri.scheme && link_uri.host != uri.host
          next if link_uri.query
          next if parent?(link_uri.path)
          next if options[:exclude].any? { |pattern| link_uri.path.start_with?(pattern) }

          repositories.push link_uri.path
        end

      end
    end
  end
end

repositories.each do |repository|
  repo_syncer = YumS3Sync::RepoSyncer.new(options[:source_base] + '/' + repository, options[:target_bucket], options[:target_base] + '/' + repository + '/', options[:keep], options[:dry_run])

  begin
    repo_syncer.sync
  rescue StandardError => e
    puts "Error syncing #{repository} skipping : #{e.message}"
  end
end
